# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup).
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }])
#   Mayor.create(name: 'Emanuel', city: cities.first)

posts = Post.create([

          {title: 'stroy of noe-love in jiaoda', author: 'rentianhui', content: "<pre>
 一个故事应该如何开头

  我不知道

 

  主楼的音乐响了

  鹏爷没有离开，他挠了挠头，不是因为有什么报告没有完成

  他看着空旷的自习室，怅然若失

  每天7:00之前准时地从宿舍走向主楼A座4层的小教室，等到22:30以后再离开

  从二月将尽到六月未央

  没有改变

  只是

  曾经一直坐在教室中间第二排的那个女生却再也没有出现过

  鹏爷想过很多，但不敢确定

  那个女生有着世界上第二好看的背影

  总是安静地坐着安静地看书安静地写字，安静得像一泊湖水

  总是习惯等到教室里人走光之后才离开

 

  鹏爷喜欢坐在那个女生右后方，看书写字，累了就抬头看着她的背影

  他觉得自己行将就木的心底似乎有了一些不同以往的声响

  他想过

  是不是发一条写满文言文的短信，或者安排一场邂逅，再或者其他的什么什么

  却究竟什么也没有做

 

  他知道她有男朋友

  鹏爷扬起脖子，喝着杯子里新泡的茶，喉咙发出阵阵“咕咕”的声音

  她也不是他在大学里第一个看上的女生了

  鹏爷笑了，摇晃着留着半寸的头

 

  从淄博到西安

  坐车要一整天，当年闯关东走西口的山东大汉，散落在这片神奇而和谐的土地上

  鹏爷的故乡有太多的化工厂和建筑队

  他不喜欢自己的故乡，一心想着离开

  他却不知道那个女生又会有怎样的故事

  甚至连她班级和姓名也不知道，想去了解却没有机会

 

  交大周围没有正规的书店，西北的地界总是缺乏人文气息

  鹏爷很暴躁

  他咒骂着和他同组实验的带文艺范的同学

  摔打着8086的板子说 “你们P都不懂滚一边去”

  实验验收时还是舔着B脸把同组的学号报了上去

  他感觉自己很孤独

  无从去排解

  只有一个人躺在宿舍的床上暗暗叹息

 

  若干年后

  鹏爷读研了，读博了，博士出来留在了交大，娶了一个自己并没有很多感觉的女生，当上了教授，有了孩子

  他依旧会去主A4楼的小教室去自习，依旧还是那个位置

  他带着微机原理和单片机的课程

  他会在实验时摔打着8086的板子骂他的学生P都不会

  舔着B脸给他们都过了

 

  又过了一些年

  鹏爷已经老了

  有一天

  他磕倒在梧桐道的路牙上，死了

  人们看到他死去时带着微笑

  他一定是想起了什么  
  
 （谨以此文献给 交大热爱自习的苦逼们）
</pre>
![Alt rentianhui](http://dp-github.qiniudn.com/rentianhui.jpg)
"
},


{title: "Jump to Ruby", author: "liupeng", content: "终于开始了学习Ruby的进程，之前一直在观望犹豫，自己还有不到半年就要找工作了,对python的掌握感觉只是浮于表面，Django让人从头学一套模式， Flask的extension自己感觉又要铺更广的路。  
  
今天中午看了2个小时<programming ruby>，感觉Ruby很适合Javaers，而Pyhton呢或许很适合Cers。确实有许多很酷的tricky。  
  
既然启程，就要有终点。谋定而动，行且坚毅，慎始图终。  
  
前些天听Rei在teahour的访谈,真是一位梦想家。如果我想放弃的时候，听一下[Blue](http://www.youtube.com/watch?v=0RuylPp-uUE&list=PLJOv-KWxUQn-PBK4pgSkOELD64YI0SvZO)。"

},





{title: "", author: "liupeng", content: "首先，先读两篇文章

* [C++ 虚函数表解析](http://blog.csdn.net/haoel/article/details/1948051)
* [C++中抽象类、虚函数和纯虚函数与Java中相关概念的对比](http://blog.csdn.net/varistor/article/details/9083129)

概念区分

- 多重继承 虚继承 虚基类
- 纯虚函数 抽象基类(全虚基类) 对应于java中接口(只有申明，没有定义实现),java根本没有virtual这个关键字，都用abstract代替
- Java中其实没有虚函数的概念，它的普通函数就相当于C++的虚函数，动态绑定是Java的默认行为。如果Java中不希望某个函数具有虚函数特性，可以加上final关键字变成非虚函数

---

正确区分重载、重写和隐藏。
注意三个概念的适用范围：处在同一个类中的函数才会出现重载。
处在父类和子类中的函数才会出现重写和隐藏。

<pre>
重载：同一类中，函数名相同，但参数列表不同。
重写：父子类中，函数名相同，参数列表相同，且有virtual修饰。
隐藏：父子类中，函数名相同，参数列表相同，但没有virtual修饰；或：函数名相同，
      参数列表不同，无论有无virtual修饰都是隐藏。

例如：
         基类中：(1)    virtual void show();           //是虚函数
                           (2)    void show(int);          //不是虚函数
         子类中：(3)    void show();                        //是虚函数
                           (4)    void show(int);          //不是虚函数
</pre>
1,2构成重载，3,4构成重载，1,3构成重写，2,4构成隐藏。另外2,3也会构成隐藏，子类对象无法访问基类的
void show(int)成员方法，但是由于子类中4的存在导致了子类对象也可以直接调用void show(int)函数，
不过此时调用的函数不在是基类中定义的void show(int)函数2，而是子类中的与3重载的4号函数。


**从虚函数的实现机制可以看到要想在子类中实现多态需要满足三个重要的条件。(1)在基类中函数声明为虚函数。(2)在子类中，对基类的虚函数进行了重写。(3)基类的指针指向了子类的对象。**
"},



{title: "learning rails routine", author: "liupeng", content: "##04.15
**railscast china videos**

- blog post comment
- omniauth github login
- tags `has_and_belongs_to_many`  has many through
- file uploader   carriverwave rmagick

##04.16

- buy a vps from digitalocean, whose ip is 198.199.106.149
- 在vps上跑了一下happycasts的旧的源码
- 看Daniel Lv的sync_twitter_weibo live show, 用的是sinatra， rpsec TDD,没有看懂"},



{title: "use shadowsocks to cross GFW", author: "liupeng", content: "前几周时间，看到微信公共号pennyjob分享vpn给听众，自己当时也恰好买了一个vps，想自己也搭建一个用于翻墙的vpn，最简单的当属pptp协议了，在宿舍折腾了整整2天,没有成功，期间连接过一次，后来再也重复不了了。网上查了好久，都没有相应的答案，最后问penny，说是GFW近来也开始封杀pptp协议，当时暂且相信给自己找个台阶，就不折腾了，继续用goagent吧。

我觉得[这篇文章](https://help.ubuntu.com/community/PPTPServer)比较靠谱，等以后再有一台本地机子，也有时间的话，了解一下。期间，也想改用l2tp协议，以前曾看到Rei分享的[]()，感觉挺麻烦的，不敢再花时间浪费在这里，不要折腾了。

时间到了上周参加[Nodejs训练营](),Howard Yeh说大家可以通过他的推荐购买云梯vpn会有一个月的试用期,自己就好奇地买了一年的。试了下，可能由于我在的学校本身是通过l2tp协议vpn上网的，所以再在之上建一个vpn通道，会有冲突，具体我是Windows7下经常会断掉，Ubuntu下没有成功连接过，而在ipad上的体验是非常好的，一部分原因是云梯自建的vpn配置文件很方便, OSX想必也会有很好的体验，支持一下[云梯](https://www.ytvpn.com/)。我说明原因申请了退款。就着赞云梯MM的服务，记得有一封服务邮件是凌晨1点发给我的。
这次经历，也验证了pptp协议确实会被墙， 云梯的pptp vpn都连不上，l2tp vpn体验很好， ipad看youtube很流畅。

昨晚，Howard Yeh 在帖子中回答说他用[shadowsocks](https://github.com/clowwindy/shadowsocks), 我搜了一下，发现了这个翻墙新大陆，果断实验之。正好最近学习Node.js, 就选用[Nodejs版本](https://github.com/clowwindy/shadowsocks-nodejs), chrome浏览器用SwitchySharp， firefox用FoxProxy, 都成功实现，我用的是DigitalOcean 在新加坡的机房的vps，ping echo time 在200ms左右，白天差一点，很少有丢包，虽然有些延迟，看youtube视频有时720p的片源还是很流畅的， 刷twiiter, facebook也都有很好的体验。

shadowsocks在客户端的生态系统覆盖面还是挺广的, Ubuntu命令行下很容易配置，相应的github主页都有介绍，就不写了。
很多人用Windows， 自己试了下，也有很好的体验， 按照我的配置，简单写一下：

- 下载[shadowsocks-gui](http://sourceforge.net/projects/shadowsocksgui/files/dist/shadowsocks-gui-0.4.1-win-ia32.7z/download),
   很多人觉得前面的链接速度太慢，这是在[百度网盘的链接](http://pan.baidu.com/s/1c0ckpt2),里面的配置可直接使用

- 打开后，填写相应配置(下图只是示例，请根据具体ip，port和password修改)
    ![配置图](http://dp-github.qiniudn.com/ss_usa.PNG)

- chrome浏览器添加插件SwitchySharp
    ![switchySharp](http://dp-github.qiniudn.com/sw1.png)    
     打开SwichySharp 选项， 在`Import/Export`选项卡`Restore from File`中导入我的[SwichProxy配置文件](http://pan.baidu.com/s/1mgDhE8g)
    ![导入配置文件](http://dp-github.qiniudn.com/switchy.PNG)
     可选择在以下两种模式下切换，绿框标中的模式会将所有流量导向server端，一般情况下请选择Auto Switch Mode
    ![mode select](http://dp-github.qiniudn.com/swichy1.png) 

现在可以翻墙了, 注意翻墙时都需要一直开着shadowsocks-gui, 自己也可以在SwitchProxy中设置路由规则，
让某些站点不走server端，直接访问就可以了。

这种翻墙大概思路是， HTTP request中的site url等数据 发给本地`localhost:local_port`, 再由它通过SOCKS协议发给`server_ip:server_port`,
 由server将过来的请求数据转发到相应的site,
server再将从site返回的response回传到本地。
中间没有在国内进行DNS解析，也就没有DNS污染了。
数据都是走SOCKS协议， 只要`server_ip`和`server_port`没有被GFW墙掉,`local_port`没有被污染，
就一直可以翻墙。

关于SOCKS:
> Socket Secure (SOCKS) is an Internet protocol that routes network packets between a client and server through a proxy server. SOCKS5 additionally provides authentication so only authorized users may access a server. Practically, a SOCKS server proxies TCP connections to an arbitrary IP address, and provides a means for UDP packets to be forwarded.

> SOCKS performs at Layer 5 of the OSI model (the session layer, an intermediate layer between the presentation layer and the transport layer).



如果是firefox浏览器，我用的是FoxProxy, AutoProxy也可以，配置跟SwichySharp都大同小异。

关于GFW的介绍，可以收听这个节目[GFW 技术研究和云梯产品故事](http://teahour.fm/2013/07/09/gfw-and-vpncloud.html)。

---
如果想体验的话，可以向我索要密码 :）

*has changed the place of vps from SG to USA*

"},


{title: "meta programming ruby", author: "liupeng", content: "

## 内省 inspect
  - `my_object.class`
  - `my_object.class.instance_methods(false)` 非继承实例方法
  - `my_object.instance_variables` 实例变量,即@name, @...

*`Object.methods.grep /^re/`*

---
## Chapter 1

### class 更像作用域，而非类型声明,  它把你带到类的上下文 context
>   类只不过是增强的Module, 增加了3个方法--new, allocate, superclass,[allocate 是 new 的支撑方法], 其他基本一样, 

### Open Class 打开类技术
  - 避免 Monkeypatch

### 任何以大写字母开头的引用（包括类名和模块名）都是常量

### MySubclass.ancestors

---
## Chapter 2

### dynamic dispatch && dynamic method, 主动策略
- send()
- use inspect 

### ghost method && dynamic proxy, 被动策略 
- override method_missing
- DelegateClassClass() 拟态方法

---
## Chapter 3

### Closures && Scope

- 作用域门: class, module, def
- 穿越作用域门:Class.new, Module.new, Module#define_method , 形成 flat scope
- Context Probe: obj.instance_eval


---
## Chapter 4

### 当前类 
  - MyClass.class_eval, 打开这个类
  - Class Instance Variables 类实例变量  vs.  Class Variable 类变量 vs. 类对象实例变量

"},




{title: "git and markdown under windows", author: "liupeng", content: "昨晚被叫去实验室检验甲方DSP板的问题，跟赵老师谈到版本控制，推荐他用git。自己一直在Ubuntu下使用git，从来没在Windows下用过，就回来查了下，顺便查了下Windows下markdown editor。

## git

在《Pro Git》中有下在[链接](http://git-scm.com/downloads)。安装完之后会有Git Gui和
Git Bash，后者体验跟在linux 命令行下一样，不需要改变习惯，还是不错的，就是不知道能不能安装自己喜欢用的tig。

## markdown

google搜索`windows markdown`头条就是[MarkdownPad2](http://markdownpad.com/),
可以使用Free版本，Pro版本需要收费。

或许自己的版权观念还是太弱，或许是自己太想知道怎么破解了，就google了下，发现两篇文章不错：

- [破解 Windows 下Markdown 编辑器 MarkdownPad 2](http://www.cnblogs.com/hazir/p/unlocking_markdownpad2.html)

- [MarkdownPad 破解学习](http://www.techboat.info/blog/markdownpad-%E7%A0%B4%E8%A7%A3%E5%AD%A6%E4%B9%A0/)

期间不懂IDA Pro, 有搜到了一篇[利用IDA Pro反汇编程序](http://www.cnblogs.com/vento/archive/2013/02/09/2909579.html)

这个经历算是消除了自己从来没有理解过怎样hack程序的不适吧。

我知道这是不好的行为。 BTW，写下自己对版权认识的经历吧。

##  对版权认识的经历

我第一台笔记本是Thinkpad T400，现在还一直在用，当时是2009年，预装的是Windows Vista Buisiness操作系统。那一年10月左右微软正式发布Windows7，推出活动，可以相应免费升级到对应的Windows7 Pro版本，自己就申请了，花了80元的联邦快递费。

后来我就一直折腾在这台小黑上来回装多系统，记得最多时同时有XP, vista, win7, ubuntu等。偶然发现网上流传这win7 VOL密钥，也有相应的软件可以查看剩余激活次数，就开始给班级大部分男生和其他朋友装企业版的或Pro版win7。用这些密钥激活与正版的唯一差别真的就是没有付钱而已，当时有些office 2010也有VOL密钥流出。

再后来我慢慢意识到，出来混迟早是要还的。就不再主动给别人装系统了，并且一开始也会拒绝，当时就一开始拒绝了班长的，等到他自己搞不定时，就不忍心给帮忙了。大家都觉我的不友好，做作。

今年前段时间偶然看到郝建强的盗版启示录，受到些触发，摆脱互害社会需要自己不要他害。希望大家能看看。

<iframe height=498 width=510 src="http://player.youku.com/embed/XNDg1Mjc1MTIw" frameborder=0 allowfullscreen></iframe>

**此篇文章在Windows MarkdownPad下完成**"},



{title: "monkey patch", author: "liupeng", content: ">  A monkey patch is a way to extend or modify the run-time code of dynamic languages without altering the original source code. This process has also been termed duck punching and shaking the bag.


> It's simply the dynamic replacement of attributes at runtime.
  For instance, consider a class that has a method get_data. This method does an external lookup (on a database or web API, for example), and various other methods in the class call it. However, in a unit test, you don't want to depend on the external data source - so you dynamically replace the get_data method with a stub that returns some fixed data.
  Because Python classes are mutable, and methods are just attributes of the class, you can do this as much as you like - and, in fact, you can even replace classes and functions in a module in exactly the same way.


[__Monkeypatching For Humans__](http://blog.codinghorror.com/monkeypatching-for-humans/)
"}



  
  
    ])
